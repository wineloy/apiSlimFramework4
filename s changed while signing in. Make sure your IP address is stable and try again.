[33mcommit 8cd07e99fdc69aac4f956acce133c9a4313f52d1[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m, [m[1;31morigin/HEAD[m[33m)[m
Author: wineloy <wineloy@gmail.com>
Date:   Sun Jul 5 01:09:58 2020 -0500

    eliminacion de herramientas dev

[1mdiff --git a/vendor/autoload.php b/vendor/autoload.php[m
[1mdeleted file mode 100644[m
[1mindex e8189e0..0000000[m
[1m--- a/vendor/autoload.php[m
[1m+++ /dev/null[m
[36m@@ -1,7 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-// autoload.php @generated by Composer[m
[31m-[m
[31m-require_once __DIR__ . '/composer/autoload_real.php';[m
[31m-[m
[31m-return ComposerAutoloaderInit65f25711565548612a1d50b4699b9783::getLoader();[m
[1mdiff --git a/vendor/composer/ClassLoader.php b/vendor/composer/ClassLoader.php[m
[1mdeleted file mode 100644[m
[1mindex fce8549..0000000[m
[1m--- a/vendor/composer/ClassLoader.php[m
[1m+++ /dev/null[m
[36m@@ -1,445 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/*[m
[31m- * This file is part of Composer.[m
[31m- *[m
[31m- * (c) Nils Adermann <naderman@naderman.de>[m
[31m- *     Jordi Boggiano <j.boggiano@seld.be>[m
[31m- *[m
[31m- * For the full copyright and license information, please view the LICENSE[m
[31m- * file that was distributed with this source code.[m
[31m- */[m
[31m-[m
[31m-namespace Composer\Autoload;[m
[31m-[m
[31m-/**[m
[31m- * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.[m
[31m- *[m
[31m- *     $loader = new \Composer\Autoload\ClassLoader();[m
[31m- *[m
[31m- *     // register classes with namespaces[m
[31m- *     $loader->add('Symfony\Component', __DIR__.'/component');[m
[31m- *     $loader->add('Symfony',           __DIR__.'/framework');[m
[31m- *[m
[31m- *     // activate the autoloader[m
[31m- *     $loader->register();[m
[31m- *[m
[31m- *     // to enable searching the include path (eg. for PEAR packages)[m
[31m- *     $loader->setUseIncludePath(true);[m
[31m- *[m
[31m- * In this example, if you try to use a class in the Symfony\Component[m
[31m- * namespace or one of its children (Symfony\Component\Console for instance),[m
[31m- * the autoloader will first look for the class under the component/[m
[31m- * directory, and it will then fallback to the framework/ directory if not[m
[31m- * found before giving up.[m
[31m- *[m
[31m- * This class is loosely based on the Symfony UniversalClassLoader.[m
[31m- *[m
[31m- * @author Fabien Potencier <fabien@symfony.com>[m
[31m- * @author Jordi Boggiano <j.boggiano@seld.be>[m
[31m- * @see    http://www.php-fig.org/psr/psr-0/[m
[31m- * @see    http://www.php-fig.org/psr/psr-4/[m
[31m- */[m
[31m-class ClassLoader[m
[31m-{[m
[31m-    // PSR-4[m
[31m-    private $prefixLengthsPsr4 = array();[m
[31m-    private $prefixDirsPsr4 = array();[m
[31m-    private $fallbackDirsPsr4 = array();[m
[31m-[m
[31m-    // PSR-0[m
[31m-    private $prefixesPsr0 = array();[m
[31m-    private $fallbackDirsPsr0 = array();[m
[31m-[m
[31m-    private $useIncludePath = false;[m
[31m-    private $classMap = array();[m
[31m-    private $classMapAuthoritative = false;[m
[31m-    private $missingClasses = array();[m
[31m-    private $apcuPrefix;[m
[31m-[m
[31m-    public function getPrefixes()[m
[31m-    {[m
[31m-        if (!empty($this->prefixesPsr0)) {[m
[31m-            return call_user_func_array('array_merge', $this->prefixesPsr0);[m
[31m-        }[m
[31m-[m
[31m-        return array();[m
[31m-    }[m
[31m-[m
[31m-    public function getPrefixesPsr4()[m
[31m-    {[m
[31m-        return $this->prefixDirsPsr4;[m
[31m-    }[m
[31m-[m
[31m-    public function getFallbackDirs()[m
[31m-    {[m
[31m-        return $this->fallbackDirsPsr0;[m
[31m-    }[m
[31m-[m
[31m-    public function getFallbackDirsPsr4()[m
[31m-    {[m
[31m-        return $this->fallbackDirsPsr4;[m
[31m-    }[m
[31m-[m
[31m-    public function getClassMap()[m
[31m-    {[m
[31m-        return $this->classMap;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * @param array $classMap Class to filename map[m
[31m-     */[m
[31m-    public function addClassMap(array $classMap)[m
[31m-    {[m
[31m-        if ($this->classMap) {[m
[31m-            $this->classMap = array_merge($this->classMap, $classMap);[m
[31m-        } else {[m
[31m-            $this->classMap = $classMap;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Registers a set of PSR-0 directories for a given prefix, either[m
[31m-     * appending or prepending to the ones previously set for this prefix.[m
[31m-     *[m
[31m-     * @param string       $prefix  The prefix[m
[31m-     * @param array|string $paths   The PSR-0 root directories[m
[31m-     * @param bool         $prepend Whether to prepend the directories[m
[31m-     */[m
[31m-    public function add($prefix, $paths, $prepend = false)[m
[31m-    {[m
[31m-        if (!$prefix) {[m
[31m-            if ($prepend) {[m
[31m-                $this->fallbackDirsPsr0 = array_merge([m
[31m-                    (array) $paths,[m
[31m-                    $this->fallbackDirsPsr0[m
[31m-                );[m
[31m-            } else {[m
[31m-                $this->fallbackDirsPsr0 = array_merge([m
[31m-                    $this->fallbackDirsPsr0,[m
[31m-                    (array) $paths[m
[31m-                );[m
[31m-            }[m
[31m-[m
[31m-            return;[m
[31m-        }[m
[31m-[m
[31m-        $first = $prefix[0];[m
[31m-        if (!isset($this->prefixesPsr0[$first][$prefix])) {[m
[31m-            $this->prefixesPsr0[$first][$prefix] = (array) $paths;[m
[31m-[m
[31m-            return;[m
[31m-        }[m
[31m-        if ($prepend) {[m
[31m-            $this->prefixesPsr0[$first][$prefix] = array_merge([m
[31m-                (array) $paths,[m
[31m-                $this->prefixesPsr0[$first][$prefix][m
[31m-            );[m
[31m-        } else {[m
[31m-            $this->prefixesPsr0[$first][$prefix] = array_merge([m
[31m-                $this->prefixesPsr0[$first][$prefix],[m
[31m-                (array) $paths[m
[31m-            );[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Registers a set of PSR-4 directories for a given namespace, either[m
[31m-     * appending or prepending to the ones previously set for this namespace.[m
[31m-     *[m
[31m-     * @param string       $prefix  The prefix/namespace, with trailing '\\'[m
[31m-     * @param array|string $paths   The PSR-4 base directories[m
[31m-     * @param bool         $prepend Whether to prepend the directories[m
[31m-     *[m
[31m-     * @throws \InvalidArgumentException[m
[31m-     */[m
[31m-    public function addPsr4($prefix, $paths, $prepend = false)[m
[31m-    {[m
[31m-        if (!$prefix) {[m
[31m-            // Register directories for the root namespace.[m
[31m-            if ($prepend) {[m
[31m-                $this->fallbackDirsPsr4 = array_merge([m
[31m-                    (array) $paths,[m
[31m-                    $this->fallbackDirsPsr4[m
[31m-                );[m
[31m-            } else {[m
[31m-                $this->fallbackDirsPsr4 = array_merge([m
[31m-                    $this->fallbackDirsPsr4,[m
[31m-                    (array) $paths[m
[31m-                );[m
[31m-            }[m
[31m-        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {[m
[31m-            // Register directories for a new namespace.[m
[31m-            $length = strlen($prefix);[m
[31m-            if ('\\' !== $prefix[$length - 1]) {[m
[31m-                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");[m
[31m-            }[m
[31m-            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;[m
[31m-            $this->prefixDirsPsr4[$prefix] = (array) $paths;[m
[31m-        } elseif ($prepend) {[m
[31m-            // Prepend directories for an already registered namespace.[m
[31m-   